{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CNN","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"9c_9VI9xKZSP","colab_type":"code","outputId":"55606f8b-5c3e-4746-97f8-f56727ea16e2","executionInfo":{"status":"ok","timestamp":1577741166051,"user_tz":-330,"elapsed":1834,"user":{"displayName":"Shubhangi Das","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAY5qjwCufeTi8dis5BL3GAUISkY1Xj7X_B9kqa=s64","userId":"10272456442885207818"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"U5h0UI0VIweb","colab_type":"code","colab":{}},"source":["import os\n","import numpy as np\n","import pandas as pd\n","import keras\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8QEOa0D_KPyS","colab_type":"code","outputId":"2b357ff1-7a35-4d89-db04-83675121a7a2","executionInfo":{"status":"ok","timestamp":1577741189845,"user_tz":-330,"elapsed":2398,"user":{"displayName":"Shubhangi Das","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAY5qjwCufeTi8dis5BL3GAUISkY1Xj7X_B9kqa=s64","userId":"10272456442885207818"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["os.chdir(\"/content/gdrive/My Drive/Colab Notebooks/cataract\")\n","os.getcwd()"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/gdrive/My Drive/Colab Notebooks/cataract'"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"xbhxqqNGJGW5","colab_type":"code","colab":{}},"source":["from keras.models import Sequential\n","from keras.layers import Convolution2D\n","from keras.layers import MaxPooling2D\n","from keras.layers import Flatten\n","from keras.layers import Dense\n","from keras.optimizers import Adam"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"n-SkTO3CJMCk","colab_type":"code","outputId":"5f1c259b-1bd7-4d6e-9c3b-18408e72e183","executionInfo":{"status":"ok","timestamp":1577741204355,"user_tz":-330,"elapsed":3788,"user":{"displayName":"Shubhangi Das","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAY5qjwCufeTi8dis5BL3GAUISkY1Xj7X_B9kqa=s64","userId":"10272456442885207818"}},"colab":{"base_uri":"https://localhost:8080/","height":105}},"source":["classifier = Sequential()\n","classifier.add(Convolution2D(32,3,3, input_shape=(64,64,3), activation='relu'))\n","classifier.add(MaxPooling2D(pool_size=(2,2)))\n","classifier.add(Convolution2D(32,3,3,activation='relu'))\n","classifier.add(MaxPooling2D(pool_size=(2,2)))\n","classifier.add(Flatten())"],"execution_count":19,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: UserWarning: Update your `Conv2D` call to the Keras 2 API: `Conv2D(32, (3, 3), input_shape=(64, 64, 3..., activation=\"relu\")`\n","  \n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: UserWarning: Update your `Conv2D` call to the Keras 2 API: `Conv2D(32, (3, 3), activation=\"relu\")`\n","  after removing the cwd from sys.path.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"9wkKLoFuJO7n","colab_type":"code","outputId":"97620b44-cfe6-4e9d-9e88-432d5449a6a2","executionInfo":{"status":"ok","timestamp":1577741208320,"user_tz":-330,"elapsed":2540,"user":{"displayName":"Shubhangi Das","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mAY5qjwCufeTi8dis5BL3GAUISkY1Xj7X_B9kqa=s64","userId":"10272456442885207818"}},"colab":{"base_uri":"https://localhost:8080/","height":105}},"source":["classifier.add(Dense(output_dim=128,activation='relu'))\n","classifier.add(Dense(output_dim=1 ,activation='sigmoid'))"],"execution_count":20,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:1: UserWarning: Update your `Dense` call to the Keras 2 API: `Dense(activation=\"relu\", units=128)`\n","  \"\"\"Entry point for launching an IPython kernel.\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: UserWarning: Update your `Dense` call to the Keras 2 API: `Dense(activation=\"sigmoid\", units=1)`\n","  \n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"5oB0CfiUJUV-","colab_type":"code","colab":{}},"source":["classifier.compile(optimizer='adam', loss='binary_crossentropy', metrics = ['accuracy'])"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JXnFF_94JXht","colab_type":"code","outputId":"899ce5c7-0c4e-4afb-8a32-7fd6f55186fe","colab":{"base_uri":"https://localhost:8080/","height":156}},"source":["from keras.preprocessing.image import ImageDataGenerator\n","train_datagen = ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True)\n","test_datagen = ImageDataGenerator(rescale=1./255)\n","\n","\n","training_set = train_datagen.flow_from_directory('/content/gdrive/My Drive/Colab Notebooks/cataract/Train-new',\n","                                                   target_size=(64, 64),\n","                                                    batch_size=20,\n","                                                    class_mode='binary')\n","\n","test_set = test_datagen.flow_from_directory('/content/gdrive/My Drive/Colab Notebooks/cataract/Test-new',\n","                                                target_size=(64, 64),\n","                                                 batch_size=20,\n","                                                 class_mode='binary')\n","\n","history =classifier.fit_generator(training_set,steps_per_epoch=8068,epochs=2,validation_data=test_set,nb_val_samples=1600)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Found 0 images belonging to 0 classes.\n","Found 0 images belonging to 0 classes.\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:16: UserWarning: The semantics of the Keras 2 argument `steps_per_epoch` is not the same as the Keras 1 argument `samples_per_epoch`. `steps_per_epoch` is the number of batches to draw from the generator at each epoch. Basically steps_per_epoch = samples_per_epoch/batch_size. Similarly `nb_val_samples`->`validation_steps` and `val_samples`->`steps` arguments have changed. Update your method calls accordingly.\n","  app.launch_new_instance()\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:16: UserWarning: Update your `fit_generator` call to the Keras 2 API: `fit_generator(<keras_pre..., steps_per_epoch=8068, epochs=2, validation_data=<keras_pre..., validation_steps=1600)`\n","  app.launch_new_instance()\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 1/2\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"csqg-wAtJoxM","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}